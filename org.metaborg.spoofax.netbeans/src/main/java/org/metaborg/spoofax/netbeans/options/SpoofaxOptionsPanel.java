package org.metaborg.spoofax.netbeans.options;

import java.io.File;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileFilter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

final class SpoofaxOptionsPanel extends javax.swing.JPanel {
    private static final Logger log = LoggerFactory.getLogger(SpoofaxOptionsPanel.class);

    private static final Map<String,String> SUPPORTED_ARCHIVES;
    static {
        SUPPORTED_ARCHIVES = new HashMap<String, String>();
        SUPPORTED_ARCHIVES.put("zip", "zip");
        SUPPORTED_ARCHIVES.put("jar", "jar");
        SUPPORTED_ARCHIVES.put("tar", "tar");
        SUPPORTED_ARCHIVES.put("tgz", "tar:gz");
        SUPPORTED_ARCHIVES.put("tar.gz", "tar:gz");
        SUPPORTED_ARCHIVES.put("tbz2", "tar:bz2");
        SUPPORTED_ARCHIVES.put("tar.bz2", "tar:bz2");
    }

    private final SpoofaxOptionsPanelController controller;
    private DefaultListModel<String> languagePathModel;

    SpoofaxOptionsPanel(SpoofaxOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        directoryChooser = new javax.swing.JFileChooser();
        archiveChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        languagePathList = new javax.swing.JList();
        addDirectoryBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        addArchiveBtn = new javax.swing.JButton();

        directoryChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        languagePathList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(languagePathList);

        org.openide.awt.Mnemonics.setLocalizedText(addDirectoryBtn, org.openide.util.NbBundle.getMessage(SpoofaxOptionsPanel.class, "SpoofaxOptionsPanel.addDirectoryBtn.text")); // NOI18N
        addDirectoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDirectoryBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeBtn, org.openide.util.NbBundle.getMessage(SpoofaxOptionsPanel.class, "SpoofaxOptionsPanel.removeBtn.text")); // NOI18N
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SpoofaxOptionsPanel.class, "SpoofaxOptionsPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(addArchiveBtn, org.openide.util.NbBundle.getMessage(SpoofaxOptionsPanel.class, "SpoofaxOptionsPanel.addArchiveBtn.text")); // NOI18N
        addArchiveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addArchiveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 689, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addDirectoryBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addArchiveBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addDirectoryBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addArchiveBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeBtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addDirectoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDirectoryBtnActionPerformed
        if ( directoryChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION ) {
            File path = directoryChooser.getSelectedFile();
            languagePathModel.addElement("file://"+path.getPath());
        }
    }//GEN-LAST:event_addDirectoryBtnActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        int idx = languagePathList.getSelectedIndex();
        if ( idx != -1 ) {
            languagePathModel.remove(idx);
        }
    }//GEN-LAST:event_removeBtnActionPerformed

    private void addArchiveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addArchiveBtnActionPerformed
        if ( archiveChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION ) {
            File path = archiveChooser.getSelectedFile();
            try {
                languagePathModel.addElement(getScheme(path)+"://"+path.getPath());
            } catch (Exception ex) {
                log.error("Selected archive is invalid.",path);
            }
        }
    }//GEN-LAST:event_addArchiveBtnActionPerformed

    private void init() {
        initArchiveChooser();
        initPathList();
        updateButtons();
    }

    private void initArchiveChooser() {
        archiveChooser.setFileFilter(new ExtensionFilter("All archives",
                SUPPORTED_ARCHIVES.keySet().toArray(new String[]{})));
        for ( Map.Entry<String,String> sa : SUPPORTED_ARCHIVES.entrySet() ) {
            archiveChooser.addChoosableFileFilter(new ExtensionFilter(
                    sa.getValue().toUpperCase()+" archive",
                    sa.getKey()));
        }
    }

    private String getScheme(File path) {
        String pathname = path.getName();
        for ( Map.Entry<String,String> sa : SUPPORTED_ARCHIVES.entrySet() ) {
            if ( pathname.endsWith("."+sa.getKey()) ) {
                return sa.getValue();
            }
        }
        throw new IndexOutOfBoundsException("No scheme known for "+pathname);
    }

    private void initPathList() {
        languagePathList.setModel(languagePathModel = new DefaultListModel<String>());
        languagePathList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                updateButtons();
            }
        });
        languagePathModel.addListDataListener(new ListDataListener() {
            @Override
            public void intervalAdded(ListDataEvent e) { controller.changed(); }

            @Override
            public void intervalRemoved(ListDataEvent e) { controller.changed(); }

            @Override
            public void contentsChanged(ListDataEvent e) { controller.changed(); }
        });
    }

    private void updateButtons() {
        removeBtn.setEnabled(!languagePathList.isSelectionEmpty());
    }

    void load() {
        languagePathModel.clear();
        for ( String path : SpoofaxPreferences.getDefault().getLanguagePaths() ) {
            languagePathModel.addElement(path);
        }
    }

    void store() {
        SpoofaxPreferences.getDefault()
                .setLanguagePaths(Collections.list(languagePathModel.elements()));
    }

    boolean valid() {
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addArchiveBtn;
    private javax.swing.JButton addDirectoryBtn;
    private javax.swing.JFileChooser archiveChooser;
    private javax.swing.JFileChooser directoryChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList languagePathList;
    private javax.swing.JButton removeBtn;
    // End of variables declaration//GEN-END:variables

    private static class ExtensionFilter extends FileFilter {
        private final String description;

        private final String[] extensions;

        public ExtensionFilter(String description, String... extensions) {
            description += " (";
            for ( int i = 0; i < extensions.length; i++ ) {
                if ( i > 0 ) description += ", ";
                description += "*."+extensions[i];
            }
            description += ")";
            this.description = description;
            this.extensions = extensions;
        }

        @Override
        public boolean accept(File path) {
            if ( path.isDirectory() ) return true;
            String pathname = path.getName();
            for ( String extension : extensions ) {
                if ( pathname.endsWith("."+extension) ) {
                    return true;
                }
            }
            return false;
        }

        @Override
        public String getDescription() {
            return description;
        }

    }

}
